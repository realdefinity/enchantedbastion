<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>The Enchanted Bastion | Luxury Castle Hotel</title>
  <style>
/* ===== HERO STYLES ===== */
.hero-section {
  position: relative;
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  background: linear-gradient(rgba(0,0,0,0.2), rgba(0,0,0,0.8)), 
              url('https://images.unsplash.com/photo-1582719471387-9d5d25f0a15e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80') center/cover no-repeat;
}

.hero-overlay {
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, rgba(58,15,15,0.3) 0%, transparent 100%);
  z-index: 1;
}

.hero-content {
  position: relative;
  z-index: 2;
  text-align: center;
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;
}

.hero-title {
  font-family: 'Cinzel Decorative', serif;
  font-weight: 900;
  font-size: clamp(3rem, 10vw, 6rem);
  line-height: 1.1;
  margin-bottom: 1.5rem;
  color: transparent;
  background: linear-gradient(135deg, #d4af37 0%, #f8e8b0 50%, #b38f2a 100%);
  -webkit-background-clip: text;
  background-clip: text;
  text-shadow: 0 4px 30px rgba(0, 0, 0, 0.4);
  letter-spacing: 0.05em;
  opacity: 0;
  transform: translateY(30px);
  animation: fadeInUp 1.5s cubic-bezier(0.65, 0, 0.35, 1) forwards 0.5s;
}

.hero-subtitle {
  font-family: 'Playfair Display', serif;
  font-size: clamp(1.3rem, 3.5vw, 2.2rem);
  color: #f8e8b0;
  letter-spacing: 0.2em;
  text-transform: uppercase;
  margin-bottom: 3rem;
  opacity: 0;
  transform: translateY(30px);
  animation: fadeInUp 1.2s cubic-bezier(0.65, 0, 0.35, 1) forwards 0.8s;
}

.hero-cta {
  display: inline-block;
  padding: 1rem 2.5rem;
  background: transparent;
  color: #d4af37;
  border: 2px solid #d4af37;
  border-radius: 50px;
  font-family: 'Cinzel Decorative', serif;
  font-size: 1.2rem;
  text-transform: uppercase;
  letter-spacing: 0.1em;
  cursor: pointer;
  transition: all 0.6s cubic-bezier(0.65, 0, 0.35, 1);
  position: relative;
  overflow: hidden;
  opacity: 0;
  transform: translateY(30px);
  animation: fadeInUp 1s cubic-bezier(0.65, 0, 0.35, 1) forwards 1s;
  text-decoration: none;
}

.hero-cta:hover {
  background: rgba(212, 175, 55, 0.1);
  box-shadow: 0 0 20px rgba(212, 175, 55, 0.3);
  transform: translateY(-3px);
}

.hero-image-container {
  position: relative;
  width: 80%;
  max-width: 800px;
  margin: 2rem auto 0;
  opacity: 0;
  transform: translateY(50px) scale(0.95);
  animation: fadeInUp 1.5s cubic-bezier(0.65, 0, 0.35, 1) forwards 1.2s;
}

.hero-image-wrapper {
  position: relative;
  border-radius: 16px;
  overflow: hidden;
  box-shadow: 0 40px 80px rgba(0, 0, 0, 0.8);
  border: 1px solid rgba(212, 175, 55, 0.3);
}

.hero-image {
  width: 100%;
  height: auto;
  display: block;
}

.image-reflection {
  position: absolute;
  bottom: -60%;
  left: 0;
  width: 100%;
  height: 60%;
  background: linear-gradient(to top, rgba(212, 175, 55, 0.1), transparent);
  transform: scaleY(-1);
  opacity: 0.4;
  filter: blur(10px);
  z-index: -1;
}

.scroll-indicator {
  position: absolute;
  bottom: 2rem;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  flex-direction: column;
  align-items: center;
  opacity: 0;
  animation: fadeIn 1.5s ease forwards 1.5s;
  z-index: 3;
}

.scroll-line {
  width: 1px;
  height: 60px;
  background: linear-gradient(to bottom, #d4af37, transparent);
  position: relative;
  overflow: hidden;
}

.scroll-line::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 20px;
  background: #d4af37;
  animation: scrollPulse 2.5s infinite cubic-bezier(0.65, 0, 0.35, 1);
}

.scroll-text {
  font-family: 'Cormorant Garamond', serif;
  font-size: 0.9rem;
  letter-spacing: 0.2em;
  text-transform: uppercase;
  margin-top: 1rem;
  color: #f8e8b0;
}

@keyframes fadeInUp {
  to { opacity: 1; transform: translateY(0) scale(1); }
}

@keyframes fadeIn {
  to { opacity: 1; }
}

@keyframes scrollPulse {
  0%, 100% { transform: translateY(0); opacity: 0.8; }
  50% { transform: translateY(40px); opacity: 1; }
}
    /* ===== CORE STYLES ===== */
    :root {
      /* Color System */
      --gold: #d4af37;
      --gold-light: #f8e8b0;
      --gold-dark: #b38f2a;
      --ivory: #f8f4e9;
      --black: #121212;
      --black-light: #1a1a1a;
      --velvet: #3a0f0f;
      
      /* Transition System */
      --transition-smooth: cubic-bezier(0.65, 0, 0.35, 1);
      --transition-bounce: cubic-bezier(0.68, -0.6, 0.32, 1.6);
      
      /* Spacing System */
      --space-xs: 0.5rem;
      --space-sm: 1rem;
      --space-md: 2rem;
      --space-lg: 3rem;
      --space-xl: 4rem;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    html {
      scroll-behavior: smooth;
    }
    
    body {
      font-family: 'Cormorant Garamond', serif;
      color: var(--ivory);
      background-color: var(--black);
      overflow-x: hidden;
      min-height: 100vh;
      line-height: 1.6;
    }
    
    /* ===== UTILITY CLASSES ===== */
    .container {
      width: 100%;
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 var(--space-md);
    }
    
    .section {
      padding: var(--space-xl) 0;
      position: relative;
    }
    
    .section-title {
      font-family: 'Cinzel Decorative', serif;
      font-size: clamp(2rem, 5vw, 3.5rem);
      color: var(--gold);
      margin-bottom: var(--space-lg);
      text-align: center;
      position: relative;
    }
    
    .section-title::after {
      content: '';
      position: absolute;
      bottom: -1rem;
      left: 50%;
      transform: translateX(-50%);
      width: 100px;
      height: 2px;
      background: linear-gradient(90deg, transparent, var(--gold), transparent);
    }
    
    /* ===== COMPONENT STYLES ===== */
    /* Preloader Component */
    .preloader {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: var(--black);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      transition: opacity 1s var(--transition-smooth);
    }
    
    .preloader.fade-out {
      opacity: 0;
      pointer-events: none;
    }
    
    /* Cursor Component */
    .gold-cursor {
      position: fixed;
      width: 32px;
      height: 32px;
      border: 2px solid var(--gold);
      border-radius: 50%;
      pointer-events: none;
      z-index: 9999;
      transform: translate(-50%, -50%);
      transition: 
        transform 0.1s ease-out,
        width 0.3s var(--transition-smooth),
        height 0.3s var(--transition-smooth);
      mix-blend-mode: exclusion;
    }
    
    /* Hero Component */
    .hero-section {
      position: relative;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      justify-content: center;
      background: linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.9)), 
                  url('https://example.com/hero.jpg') center/cover no-repeat;
    }
    
    /* Staff Component */
    .department-card {
      background: rgba(30, 30, 30, 0.8);
      border-radius: 12px;
      padding: var(--space-md);
      border: 1px solid rgba(212, 175, 55, 0.2);
      transition: all 0.4s var(--transition-smooth);
    }
    
    /* ===== ANIMATION SYSTEM ===== */
    [data-animate] {
      opacity: 0;
      transform: translateY(30px);
      transition: all 0.8s var(--transition-smooth);
    }
    
    [data-animate].visible {
      opacity: 1;
      transform: translateY(0);
    }
    
    [data-animate-delay="100"] { transition-delay: 0.1s; }
    [data-animate-delay="200"] { transition-delay: 0.2s; }
    [data-animate-delay="300"] { transition-delay: 0.3s; }
    
    @media (max-width: 768px) {
      :root {
        --space-md: 1.5rem;
        --space-lg: 2rem;
        --space-xl: 3rem;
      }
    }
  </style>
</head>
<body>
  <!-- ===== COMPONENTS ===== -->
  <!-- Preloader -->
  <div class="preloader" data-component="preloader">
    <div class="preloader-logo">The Enchanted Bastion</div>
    <div class="preloader-spinner"></div>
  </div>
  
  <!-- Cursor -->
  <div class="gold-cursor" data-component="cursor"></div>
  
  <!-- Hero Section -->
<section class="hero-section" data-component="hero">
  <div class="container">
    <h1 class="hero-title" data-animate>The Enchanted Bastion</h1>
    <p class="hero-subtitle" data-animate data-animate-delay="200">LOIRE VALLEY, FRANCE</p>
  </div>
</section>
  
  <!-- Staff Section -->
  <section class="section" data-component="staff" id="staff">
    <div class="container">
      <h2 class="section-title" data-animate>Our Staff</h2>
      
      <div class="department-grid">
        <!-- Department cards injected by JavaScript -->
      </div>
    </div>
  </section>
  
  <!-- ===== NEW SECTION TEMPLATE ===== -->
  <!-- 
  <section class="section" data-component="template" id="new-section">
    <div class="container">
      <h2 class="section-title" data-animate>Section Title</h2>
      
      <div class="content" data-animate data-animate-delay="200">
        <!-- Content goes here -->
      </div>
    </div>
  </section>
  -->

  <!-- ===== MODULAR JAVASCRIPT ===== -->
  <script>
    // ===== CORE MODULES =====
    const App = {
      // Initialize all components
      init() {
        // Load components
        document.querySelectorAll('[data-component]').forEach(el => {
          const component = el.getAttribute('data-component');
          if (this.components[component]) {
            this.components[component].init(el);
          }; 
      // ===== HERO COMPONENT (COPY THIS) =====
App.components.hero = {
  init(el) {
    this.initParallax(el);
  },

  initParallax(el) {
    const wrapper = el.querySelector('#heroImageWrapper');
    if (!wrapper) return;
    
    el.addEventListener('mousemove', (e) => {
      const rect = el.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      
      const centerX = rect.width / 2;
      const centerY = rect.height / 2;
      
      const angleX = (y - centerY) / 20;
      const angleY = (centerX - x) / 20;
      
      wrapper.style.transform = `rotateX(${angleX}deg) rotateY(${angleY}deg)`;
    });
    
    el.addEventListener('mouseleave', () => {
      wrapper.style.transform = 'rotateX(0) rotateY(0)';
    });
  }
};
        });
        
        // Initialize animations
        this.initAnimations();
      },
      
      // Component registry
      components: {},
      
      // Animation system
      initAnimations() {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('visible');
            }
          });
        }, { threshold: 0.1 });
        
        document.querySelectorAll('[data-animate]').forEach(el => {
          observer.observe(el);
        });
      }
    };
    
    // ===== COMPONENT MODULES =====
    // Preloader Component
    App.components.preloader = {
      init(el) {
        // Simulate loading
        setTimeout(() => {
          el.classList.add('fade-out');
          
          // Remove from DOM after animation
          setTimeout(() => el.remove(), 1000);
        }, 1500);
      }
    };
    
    // Cursor Component
    App.components.cursor = {
      init(el) {
        let mouseX = 0, mouseY = 0;
        let cursorX = 0, cursorY = 0;
        const speed = 0.15;
        
        const animate = () => {
          const dx = mouseX - cursorX;
          const dy = mouseY - cursorY;
          
          cursorX += dx * speed;
          cursorY += dy * speed;
          
          el.style.transform = `translate(${cursorX}px, ${cursorY}px)`;
          requestAnimationFrame(animate);
        };
        
        document.addEventListener('mousemove', (e) => {
          mouseX = e.clientX;
          mouseY = e.clientY;
        });
        
        animate();
      }
    };
    
    // Staff Component
    App.components.staff = {
      init(el) {
        const grid = el.querySelector('.department-grid');
        
        // Sample data - in real app you might fetch this
        const departments = [
          {
            title: "Front Office",
            icon: "🏨",
            staff: 24,
            positions: [
              { role: "Front Desk Manager", count: 2, salary: "€65,000" },
              { role: "Front Desk Agents", count: 14, salary: "€42,000" }
            ]
          },
          // Add more departments here
        ];
        
        // Render departments
        departments.forEach(dept => {
          grid.innerHTML += this.createDepartmentCard(dept);
        });
      },
      
      createDepartmentCard(dept) {
        return `
          <div class="department-card" data-animate>
            <h3>${dept.icon} ${dept.title}</h3>
            <p>${dept.staff} staff members</p>
            <ul>
              ${dept.positions.map(pos => `
                <li>${pos.role}: ${pos.count} (${pos.salary})</li>
              `).join('')}
            </ul>
          </div>
        `;
      }
    };
    
    // ===== NEW COMPONENT TEMPLATE =====
    /*
    App.components.template = {
      init(el) {
        // Component initialization code
        
        // Example: Load data and render
        this.loadData().then(data => {
          this.render(el, data);
        });
      },
      
      loadData() {
        // Return promise with component data
        return Promise.resolve({/* data */});
      },
      
      render(el, data) {
        // Render component HTML
        el.innerHTML = `<div>New Component</div>`;
      }
    };
    */
    
    // Initialize the app when DOM is ready
    document.addEventListener('DOMContentLoaded', () => App.init());
  </script>
</body>
</html>
