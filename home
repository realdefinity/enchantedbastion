<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>

    
    :root {
      --gold: #d4af37;
      --gold-light: #f8e8b0;
      --gold-dark: #b38f2a;
      --ivory: #f8f4e9;
      --black: #121212;
      --black-light: #1a1a1a;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    html {
      scroll-behavior: smooth;
    }
    
    body {
      font-family: 'Cormorant Garamond', serif;
      color: var(--ivory);
      background: var(--black);
      overflow-x: hidden;
      min-height: 100vh;
      line-height: 1.6;
    }
    
    /* ===== EPIC COSMIC BACKGROUND ===== */
    .hero-section {
      position: relative;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      overflow: hidden;
      background: 
        radial-gradient(ellipse at bottom, #1B2735 0%, #090A0F 100%),
        url('https://images.unsplash.com/photo-1534447677768-be436bb09401?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1491&q=80') center/cover no-repeat;
    }
    
    .hero-overlay {
      position: absolute;
      inset: 0;
      background: linear-gradient(135deg, rgba(58,15,15,0.3) 0%, transparent 100%);
      z-index: 1;
    }
    
    .hero-content {
      position: relative;
      z-index: 2;
      text-align: center;
      padding: 2rem;
      max-width: 1200px;
      margin: 0 auto;
    }
    
    .hero-title {
      font-family: 'Cinzel Decorative', serif;
      font-weight: 900;
      font-size: clamp(3rem, 10vw, 6rem);
      line-height: 1.1;
      margin-bottom: 1.5rem;
      color: transparent;
      background: linear-gradient(135deg, var(--gold) 0%, var(--gold-light) 50%, var(--gold-dark) 100%);
      -webkit-background-clip: text;
      background-clip: text;
      text-shadow: 0 4px 30px rgba(0, 0, 0, 0.4);
      letter-spacing: 0.05em;
      opacity: 0;
      transform: translateY(30px);
      animation: fadeInUp 1.5s cubic-bezier(0.22, 1, 0.36, 1) forwards 0.5s;
    }
    
    .hero-subtitle {
      font-family: 'Playfair Display', serif;
      font-size: clamp(1.3rem, 3.5vw, 2.2rem);
      color: var(--gold-light);
      letter-spacing: 0.2em;
      text-transform: uppercase;
      margin-bottom: 3rem;
      opacity: 0;
      transform: translateY(30px);
      animation: fadeInUp 1.2s cubic-bezier(0.22, 1, 0.36, 1) forwards 0.8s;
    }
    
    .hero-cta {
      display: inline-block;
      padding: 1rem 2.5rem;
      background: transparent;
      color: var(--gold);
      border: 2px solid var(--gold);
      border-radius: 50px;
      font-family: 'Cinzel Decorative', serif;
      font-size: 1.2rem;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      cursor: pointer;
      transition: all 0.6s cubic-bezier(0.22, 1, 0.36, 1);
      position: relative;
      overflow: hidden;
      opacity: 0;
      transform: translateY(30px);
      animation: fadeInUp 1s cubic-bezier(0.22, 1, 0.36, 1) forwards 1s;
      text-decoration: none;
      margin-top: 2rem; /* Added space between image & button */
      z-index: 10; /* Ensures button stays above everything */
    }
    
    .hero-cta:hover {
      background: rgba(212, 175, 55, 0.1);
      box-shadow: 0 0 30px rgba(212, 175, 55, 0.5);
      transform: translateY(-5px);
    }
    
    .hero-image-container {
      position: relative;
      width: 80%;
      max-width: 800px;
      margin: 2rem auto 0;
      perspective: 1000px;
      opacity: 0;
      transform: translateY(50px) scale(0.95);
      animation: fadeInUp 1.5s cubic-bezier(0.22, 1, 0.36, 1) forwards 1.2s;
    }
    
    .hero-image-wrapper {
      position: relative;
      border-radius: 16px;
      overflow: hidden;
      box-shadow: 0 40px 80px rgba(0, 0, 0, 0.8);
      transform-style: preserve-3d;
      transition: transform 0.8s cubic-bezier(0.22, 1, 0.36, 1);
      border: 1px solid rgba(212, 175, 55, 0.3);
    }
    
    .hero-image {
      width: 100%;
      height: auto;
      display: block;
      transform: scale(1.05);
      transition: transform 1s cubic-bezier(0.22, 1, 0.36, 1);
    }
    
    .image-reflection {
      position: absolute;
      bottom: -60%;
      left: 0;
      width: 100%;
      height: 60%;
      background: linear-gradient(to top, rgba(212, 175, 55, 0.1), transparent);
      transform: scaleY(-1);
      opacity: 0.4;
      filter: blur(10px);
      z-index: -1;
    }
    
    /* ===== ANIMATIONS ===== */
    @keyframes fadeInUp {
      to { opacity: 1; transform: translateY(0) scale(1); }
    }
    
    /* ===== GOLD DUST PARTICLES ===== */
    .gold-particle {
      position: absolute;
      background: var(--gold-light);
      border-radius: 50%;
      opacity: 0;
      filter: blur(1px);
      z-index: -1;
      animation: floatParticle linear infinite;
    }
    
    @keyframes floatParticle {
      0%, 100% { transform: translate(0, 0) rotate(0deg); opacity: 0; }
      10% { opacity: 0.3; }
      90% { opacity: 0.3; }
      100% { transform: translate(80px, -100vh) rotate(360deg); opacity: 0; }
    }
    </style>
</head>
<body>
  <!-- ===== COMPONENTS ===== -->
  <!-- Preloader -->
  <div class="preloader" data-component="preloader">
    <div class="preloader-logo">The Enchanted Bastion</div>
    <div class="preloader-spinner"></div>
  </div>
  
  <!-- Cursor -->
  <div class="gold-cursor" data-component="cursor"></div>
  
<!-- ===== HERO SECTION ===== -->
<section class="hero-section" data-component="hero">
  <div class="hero-overlay"></div>
  
  <div class="hero-content">
    <h1 class="hero-title">The Enchanted Bastion</h1>
    <p class="hero-subtitle">LOIRE VALLEY, FRANCE</p>
    
    <div class="hero-image-container">
      <div class="hero-image-wrapper" id="heroImageWrapper">
        <img src="https://images.unsplash.com/photo-1582719471387-9d5d25f0a15e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80" 
             alt="Couldn't load image" 
             class="hero-image">
        <div class="image-reflection"></div>
      </div>
    </div>
    
    <a href="#staff" class="hero-cta">Begin Your Journey</a>
  </div>
</section>
  
  <!-- Staff Section -->
  <section class="section" data-component="staff" id="staff">
    <div class="container">
      <h2 class="section-title" data-animate>Our Staff</h2>
      
      <div class="department-grid">
        <!-- Department cards injected by JavaScript -->
      </div>
    </div>
  </section>
  
  <!-- ===== NEW SECTION TEMPLATE ===== -->
  <!-- 
  <section class="section" data-component="template" id="new-section">
    <div class="container">
      <h2 class="section-title" data-animate>Section Title</h2>
      
      <div class="content" data-animate data-animate-delay="200">
        <!-- Content goes here -->
      </div>
    </div>
  </section>
  -->

  <!-- ===== MODULAR JAVASCRIPT ===== -->
<script>
  // ===== CORE MODULES =====
  const App = {
    // Initialize all components
    init() {
      // Load components
      document.querySelectorAll('[data-component]').forEach(el => {
        const component = el.getAttribute('data-component');
        if (this.components[component]) {
          this.components[component].init(el);
        }
      });
      
      // Initialize animations
      this.initAnimations();
    },
    
    // Component registry
    components: {
      // ===== HERO COMPONENT =====
      hero: {
        init(el) {
          this.initParallax(el);
        },
        initParallax(el) {
          const wrapper = el.querySelector('#heroImageWrapper');
          if (!wrapper) return;
          
          el.addEventListener('mousemove', (e) => {
            const rect = el.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            const centerX = rect.width / 2;
            const centerY = rect.height / 2;
            
            const angleX = (y - centerY) / 20;
            const angleY = (centerX - x) / 20;
            
            wrapper.style.transform = `rotateX(${angleX}deg) rotateY(${angleY}deg)`;
          });
          
          el.addEventListener('mouseleave', () => {
            wrapper.style.transform = 'rotateX(0) rotateY(0)';
          });
        }
      },
      
      // ===== PRELOADER COMPONENT =====
      preloader: {
        init(el) {
          setTimeout(() => {
            el.classList.add('fade-out');
            setTimeout(() => el.remove(), 1000);
          }, 1500);
        }
      },
      
      // ===== CURSOR COMPONENT =====
      cursor: {
        init(el) {
          let mouseX = 0, mouseY = 0;
          let cursorX = 0, cursorY = 0;
          const speed = 0.15;
          
          const animate = () => {
            const dx = mouseX - cursorX;
            const dy = mouseY - cursorY;
            cursorX += dx * speed;
            cursorY += dy * speed;
            el.style.transform = `translate(${cursorX}px, ${cursorY}px)`;
            requestAnimationFrame(animate);
          };
          
          document.addEventListener('mousemove', (e) => {
            mouseX = e.clientX;
            mouseY = e.clientY;
          });
          
          animate();
        }
      },
      
      // ===== STAFF COMPONENT =====
      staff: {
        init(el) {
          const grid = el.querySelector('.department-grid');
          const departments = [
            {
              title: "Front Office",
              icon: "🏨",
              staff: 24,
              positions: [
                { role: "Front Desk Manager", count: 2, salary: "€65,000" },
                { role: "Front Desk Agents", count: 14, salary: "€42,000" }
              ]
            }
          ];
          
          departments.forEach(dept => {
            grid.innerHTML += `
              <div class="department-card" data-animate>
                <h3>${dept.icon} ${dept.title}</h3>
                <p>${dept.staff} staff members</p>
                <ul>
                  ${dept.positions.map(pos => `
                    <li>${pos.role}: ${pos.count} (${pos.salary})</li>
                  `).join('')}
                </ul>
              </div>
            `;
          });
        }
      }
    },
    
    // Animation system
    initAnimations() {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('visible');
          }
        });
      }, { threshold: 0.1 });
      
      document.querySelectorAll('[data-animate]').forEach(el => {
        observer.observe(el);
      });
// ===== SMOOTH HERO COMPONENT =====
App.components.hero = {
  init(el) {
    this.createParticles(el);
    this.initParallax(el);
    this.fixScrollBug(); // Added to prevent white flash
  },

  // Floating gold dust particles
  createParticles(el) {
    const particleCount = Math.min(Math.floor(window.innerWidth / 20), 60);
    
    for (let i = 0; i < particleCount; i++) {
      const particle = document.createElement('div');
      particle.classList.add('gold-particle');
      
      // Random properties
      const size = Math.random() * 4 + 1;
      const posX = Math.random() * window.innerWidth;
      const duration = Math.random() * 15 + 10;
      const delay = Math.random() * 5;
      const opacity = Math.random() * 0.3 + 0.1;
      
      particle.style.cssText = `
        width: ${size}px;
        height: ${size}px;
        left: ${posX}px;
        animation: floatParticle ${duration}s linear ${delay}s infinite;
        opacity: ${opacity};
      `;
      
      el.appendChild(particle);
    }
  },

  // Mouse-tilt effect on castle image
  initParallax(el) {
    const wrapper = el.querySelector('#heroImageWrapper');
    if (!wrapper) return;
    
    el.addEventListener('mousemove', (e) => {
      const rect = el.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      
      const centerX = rect.width / 2;
      const centerY = rect.height / 2;
      
      const angleX = (y - centerY) / 20;
      const angleY = (centerX - x) / 20;
      
      wrapper.style.transform = `rotateX(${angleX}deg) rotateY(${angleY}deg)`;
    });
    
    el.addEventListener('mouseleave', () => {
      wrapper.style.transform = 'rotateX(0) rotateY(0)';
    });
  },

  // Fixes the white flash bug when scrolling
  fixScrollBug() {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function(e) {
        e.preventDefault();
        document.querySelector(this.getAttribute('href')).scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
      });
    });
  }
};
  // Start the app
  document.addEventListener('DOMContentLoaded', () => App.init());
</script>
</body>
</html>
